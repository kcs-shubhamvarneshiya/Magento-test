<?php
/**
 * Patch File to create url rewrites for categories that were absent
 *
 * @category  Lyons
 * @package   Lyonscg_Catalog
 * @author    Tanya Mamchik <tanya.mamchik@capgemini.com>
 * @copyright Copyright (c) 2020 Lyons Consulting Group (www.lyonscg.com)
 */
namespace Lyonscg\Catalog\Setup\Patch\Data;

use Magento\Catalog\Model\ResourceModel\Category\Collection;
use Magento\Catalog\Model\ResourceModel\Category\CollectionFactory;
use Magento\CatalogUrlRewrite\Model\CategoryUrlRewriteGenerator;
use Magento\CatalogUrlRewrite\Model\Map\DatabaseMapPool;
use Magento\CatalogUrlRewrite\Model\UrlRewriteBunchReplacer;
use Magento\Framework\App\ResourceConnection;
use Magento\Framework\Setup\Patch\DataPatchInterface;
use Magento\Store\Model\StoreManagerInterface;
use Magento\UrlRewrite\Model\Storage\DbStorage;
use Psr\Log\LoggerInterface;

class FixCategoryUrlDefaultStoreView1 implements DataPatchInterface
{

    /**
     * @var CollectionFactory
     */
    private $collectionFactory;
    /**
     * @var CategoryUrlRewriteGenerator
     */
    private $categoryUrlRewriteGenerator;
    /**
     * @var UrlRewriteBunchReplacer
     */
    private $urlRewriteBunchReplacer;
    /**
     * @var DatabaseMapPool
     */
    private $databaseMapPool;
    /**
     * @var ResourceConnection
     */
    private $resourceConnection;
    /**
     * @var string
     */
    protected $mainDbTable;
    /**
     * @var LoggerInterface
     */
    private $logger;
    /**
     * @var StoreManagerInterface
     */
    private $storeManager;

    public function __construct(
        StoreManagerInterface $storeManager,
        CollectionFactory $collectionFactory,
        CategoryUrlRewriteGenerator $categoryUrlRewriteGenerator,
        UrlRewriteBunchReplacer $urlRewriteBunchReplacer,
        DatabaseMapPool $databaseMapPool,
        ResourceConnection $resourceConnection,
        LoggerInterface $logger
    ) {
        $this->storeManager = $storeManager;
        $this->collectionFactory = $collectionFactory;
        $this->categoryUrlRewriteGenerator = $categoryUrlRewriteGenerator;
        $this->urlRewriteBunchReplacer = $urlRewriteBunchReplacer;
        $this->databaseMapPool = $databaseMapPool;
        $this->resourceConnection = $resourceConnection;
        $this->logger = $logger;
    }

    /**
     * @inheritDoc
     */
    public function apply()
    {
        /** @var Collection $categoryCollection */
        $categoryCollection = $this->collectionFactory->create();
        try {
            $categoryCollection->addAttributeToSelect('*')
                ->setStore(1)
                ->addAttributeToFilter('url_key', ['neq' => 'NULL'])
                ->joinField('url_rewrite_request_path', 'url_rewrite', 'request_path', 'entity_id = entity_id', sprintf(
                    '{{table}}.is_autogenerated = 1 AND {{table}}.store_id = %d AND {{table}}.entity_type = \'%s\'',
                    1,
                    CategoryUrlRewriteGenerator::ENTITY_TYPE
                ), 'left')
                ->addFilterToMap('url_rewrite_request_path', 'url_rewrite.request_path')
                ->addFieldToFilter('url_rewrite_request_path', ['null' => true]);
            $categories = $categoryCollection->load();
            $this->processCategories($categories);
        } catch (\Exception $e) {
            $this->logger->error($e->getMessage());
        }
    }

    /**
     * @param array $categories
     */
    protected function processCategories($categories)
    {
        foreach ($categories as $category) {
            try {
                if ($category->getEntityId() != $this->storeManager->getStore(1)->getRootCategoryId() && $category->getLevel() != 1) {
                    $categoryUrlRewriteResult = $this->categoryUrlRewriteGenerator->generate($category);
                    if (!empty($categoryUrlRewriteResult)) {
                        $data = $this->prepareUrlRewrites($categoryUrlRewriteResult);
                        if (!empty($data)) {
                            foreach ($data as $record) {
                                $this->resourceConnection->getConnection()->beginTransaction();
                                try {
                                    $this->resourceConnection->getConnection()->insert(
                                        $this->getMainTableName(),
                                        $record
                                    );
                                    $this->resourceConnection->getConnection()->commit();
                                } catch (\Exception $e) {
                                    $this->resourceConnection->getConnection()->rollBack();
                                    $this->logger->error($e->getMessage());
                                }
                            }
                        }
                    }
                }
            } catch (\Exception $e) {
                $this->logger->error($e->getMessage());
            }
        }
    }

    /**
     * @param array $urlRewrites
     * @return array
     */
    protected function prepareUrlRewrites($urlRewrites)
    {
        $result = [];
        foreach ($urlRewrites as $urlRewrite) {
            $rewrite = $urlRewrite->toArray();

            // check if same Url Rewrite already exists
            $originalRequestPath = trim($rewrite['request_path']);

            // skip empty Url Rewrites
            if (empty($originalRequestPath)) {
                continue;
            }

            // split generated Url Rewrite into parts
            $pathParts = pathinfo($originalRequestPath);

            // remove leading/trailing slashes and dots from parts
            $pathParts['dirname'] = trim($pathParts['dirname'], './');
            $pathParts['filename'] = trim($pathParts['filename'], './');

            // If the last symbol was slash - let's use it as url suffix
            $urlSuffix = substr($originalRequestPath, -1) === '/' ? '/' : '';

            // re-set Url Rewrite with sanitized parts
            $rewrite['request_path'] = $this->mergePartsIntoRewriteRequest($pathParts, '', $urlSuffix);

            // check if we have a duplicate (maybe exists product with same name => same Url Rewrite)
            $index = 0;
            while ($this->urlRewriteExists($rewrite)) {
                return [];
            }

            $result[] = $rewrite;
        }
        return $result;
    }

    /**
     * @param $pathParts
     * @param string $index
     * @param string $urlSuffix
     * @return string
     */
    protected function mergePartsIntoRewriteRequest($pathParts, $index = '', $urlSuffix = '')
    {
        $result = (!empty($pathParts['dirname']) ? $pathParts['dirname'] . '/' : '') . $pathParts['filename']
            . (!empty($index) ? '-' . $index : '')
            . (!empty($pathParts['extension']) ? '.' . $pathParts['extension'] : '')
            . ($urlSuffix ?: '');

        return $result;
    }

    /**
     * @param array $rewrite
     * @return string
     */
    protected function urlRewriteExists($rewrite)
    {
        $select = $this->resourceConnection->getConnection()->select()
            ->from($this->getMainTableName(), ['url_rewrite_id'])
            ->where('request_path = ?', $rewrite['request_path'])
            ->where('store_id = ?', $rewrite['store_id']);
        return $this->resourceConnection->getConnection()->fetchOne($select);
    }

    /**
     * @return string
     */
    protected function getMainTableName()
    {
        if (empty($this->mainDbTable)) {
            $this->mainDbTable = $this->resourceConnection->getTableName(DbStorage::TABLE_NAME);
        }
        return $this->mainDbTable;
    }

    /**
     * @inheritDoc
     */
    public static function getDependencies()
    {
        return [];
    }

    /**
     * @inheritdoc
     */
    public static function getVersion()
    {
        return '1.0.0';
    }

    /**
     * @inheritDoc
     */
    public function getAliases()
    {
        return [];
    }
}
